1. Class and Instance Methods
path(path) → string
Returns the string representation of the path
File.path("/dev/null")          #=> "/dev/null"
File.path(Pathname.new("/tmp")) #=> "/tmp"

path → filename
to_path → filename

Returns the pathname used to create file as a string. Does not normalize the name.

The pathname may not point to the file corresponding to file. For instance, the pathname becomes void when the file has been moved or deleted.

This method raises IOError for a file created using File::Constants::TMPFILE because they don't have a pathname.
-----------------------------------------------

The definiton for the File::path method and the File#path method are above.

The obvious difference is that one is a Class method and one is an instance method.

Class methods are called on the Class object and instance methods are called on an instance of that Class.

The class method converts the file path to a string, and the instance method returns the path name.
----------------------------------------------------------------------------------
2. Optional Arguments Redux

require 'date'

puts Date.new
puts Date.new(2016)
puts Date.new(2016, 5)
puts Date.new(2016, 5, 13)
*run*
-4712-01-01  #The default values
2016-01-01   #year given, month and day are defaults
2016-05-01
2016-05-13
=>nil
puts Date.new(2016, 5, 13, Date::ITALTY) Another argument can be given a Constant for the Calendar type

Those are all new objects using the class method .new and the arguments represent (year, month, day, respectively) the 4th argument probably represents time

[]          means that the argument is optional
,           means that there needs to be a comma
year=-4712  default arguments
→ date      means that this method returns a date object
----------------------------------------------------------------------------------
3.Default Arguments in the Middle

https://docs.ruby-lang.org/en/2.7.0/syntax/calling_methods_rdoc.html#label-Receiver

Default Positional Arguments

When the method defines default arguments you do not need to supply all the arguments to the method. Ruby will fill in the missing arguments in-order.

First we'll cover the simple case where the default arguments appear on the right. Consider this method:

def my_method(a, b, c = 3, d = 4)
  p [a, b, c, d]
end

Here c and d have default values which ruby will apply for you. If you send only two arguments to this method:

my_method(1, 2)

You will see ruby print [1, 2, 3, 4].

If you send three arguments:

my_method(1, 2, 5)

You will see ruby print [1, 2, 5, 4]

Ruby fills in the missing arguments from left to right.

Ruby allows default values to appear in the middle of positional arguments. Consider this more complicated method:

def my_method(a, b = 2, c = 3, d)
  p [a, b, c, d]
end

Here b and c have default values. If you send only two arguments to this method:

my_method(1, 4)

You will see ruby print [1, 2, 3, 4].

If you send three arguments:

my_method(1, 5, 6)

You will see ruby print [1, 5, 3, 6].

Describing this in words gets complicated and confusing. I'll describe it in variables and values instead.

First 1 is assigned to a, then 6 is assigned to d. This leaves only the arguments with default values. Since 5 has not been assigned to a value yet, it is given to b and c uses its default value of 3.

-----------------------------------------------
doc/syntax/calling_methods.rdoc

The calling methods file has a subsection that is called default positional arguments. It explains that if there is a default argument then the argument is optional. And if the argument is not assigned during initiation then Then it will be replaced respectively. But if it is declared during the initiation of the object then the argument will be skipped over and the next argument will be filled in rather than overriding the assigned argument. All of the optional arguments can be redefined if when the method is called it gives all of the optional arguments reassignment.

----------------------------------------------------------------------------------
4.
a = [1, 4, 8, 11, 15, 19]

a.bsearch { |x| x > 8}



-----------------------------------------------
I actually did this one using the command line and calling >ri and checking the documentation.
I have seen this method before it is at the top of the array instance methods,
becuase it starts with a b and they are arranged alphabetically.


----------------------------------------------------------------------------------
5.Multiple Signatures
a = %w(a b c d e)
puts a.fetch(7)
puts a.fetch(7, 'beats me')
puts a.fetch(7) { |index| index**2 }
The first one throws an error to an IndexError. the optional block and seonc arguyment are rescues for index errors.

-----------------------------------------------


----------------------------------------------------------------------------------
6.Keyword Arguments
5.step(to: 10, by: 3) { |value| puts value }

This argument will print => 5 8

-----------------------------------------------


----------------------------------------------------------------------------------
7. Parent Class

s = 'abc'
puts s.public_methods.inspect

If i set the argument to false then I will only see the methods available to the reciever.

-----------------------------------------------

----------------------------------------------------------------------------------
8. Included Modules

a = [5, 9, 3, 11]
puts a.min

-----------------------------------------------
a = [5, 9, 3, 11]
puts a.min(2)

adding 2 in as an argument will return the 2 min values of the array. There are also
block arguments that can be used in this method.

----------------------------------------------------------------------------------
9. Down the Rabbit Hole

require 'yaml'
MESSAGES = YAML.load_file('calculator_messages.yml')

load_file(filename, fallback: false) click to toggle source

Load the document contained in filename. Returns the yaml contained in filename as a Ruby object, or if the file is empty, it returns the specified fallback return value, which defaults to false.
-----------------------------------------------


----------------------------------------------------------------------------------
10.

-----------------------------------------------


----------------------------------------------------------------------------------
